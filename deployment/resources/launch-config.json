{
  "LaunchConfig": {
    "Type": "AWS::AutoScaling::LaunchConfiguration",
    "Metadata": {
      "AWS::CloudFormation::Init": {
        "configSets": {
          "full_install": [
            "install_cfn",
            "install_ruby_2_3_1",
            "configure_postgres",
            "install_application"
          ]
        },
        "install_cfn": {
          "files": {
            "/etc/cfn/cfn-hup.conf": {
              "content": {
                "Fn::Join": [
                  "",
                  [
                    "[main]\n",
                    "stack=",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "\n",
                    "region=",
                    {
                      "Ref": "AWS::Region"
                    },
                    "\n"
                  ]
                ]
              },
              "mode": "000400",
              "owner": "root",
              "group": "root"
            },
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
              "content": {
                "Fn::Join": [
                  "",
                  [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    "         --stack ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "         --resource LaunchConfig ",
                    "         --configsets full_install ",
                    "         --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "\n",
                    "runas=root\n"
                  ]
                ]
              }
            }
          },
          "services": {
            "sysvinit": {
              "cfn-hup": {
                "enabled": "true",
                "ensureRunning": "true",
                "files": [
                  "/etc/cfn/cfn-hup.conf",
                  "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                ]
              }
            }
          }
        },
        "install_ruby_2_3_1": {
          "files": {
            "/tmp/install_ruby": {
              "content": {
                "Fn::Join": [
                  "\n",
                  [
                    "#!/bin/bash",
                    "curl -sSL https://get.rvm.io | bash",
                    "source /etc/profile.d/rvm.sh",
                    "rvm install 2.3.1",
                    "rvm --default use 2.3.1",
                    "gem install rails"
                  ]
                ]
              },
              "mode": "000500",
              "owner": "root",
              "group": "root"
            }
          },
          "commands": {
            "01_install_ruby": {
              "command": "/tmp/install_ruby > /var/log/install_ruby.log"
            }
          }
        },
        "configure_postgres": {
          "packages": {
            "yum": {
              "postgresql92": [],
              "postgresql92-devel": [],
              "postgresql92-libs": []
            }
          }
        },
        "install_application": {
          "files": {
            "/tmp/database.yml": {
              "content": {
                "Fn::Join": [
                  "",
                  [
                    "development:\n",
                    "  adapter: postgresql\n",
                    "  encoding: utf8\n",
                    "  reconnect: false\n",
                    "  pool: 5\n",
                    "  database: ",
                    {
                      "Ref": "DBName"
                    },
                    "\n",
                    "  username: ",
                    {
                      "Ref": "DBUser"
                    },
                    "\n",
                    "  password: ",
                    {
                      "Ref": "DBPassword"
                    },
                    "\n",
                    "  host: ",
                    {
                      "Fn::GetAtt": [
                        "PostgresDatabase",
                        "Endpoint.Address"
                      ]
                    },
                    "\n",
                    "  port: ",
                    {
                      "Fn::GetAtt": [
                        "PostgresDatabase",
                        "Endpoint.Port"
                      ]
                    },
                    "\n"
                  ]
                ]
              },
              "mode": "000400",
              "owner": "root",
              "group": "root"
            },
            "/tmp/conditional_migration.rb": {
              "content": {
                "Fn::Join": [
                  "",
                  [
                    "class CreateNotes < ActiveRecord::Migration\n",
                    "  def change\n",
                    "    if ! table_exists?(:notes)\n",
                    "      create_table :notes do |t|\n",
                    "        t.string :title\n",
                    "        t.text :body\n",
                    "        t.timestamps\n",
                    "      end\n",
                    "    end\n",
                    "  end\n",
                    "end\n"
                  ]
                ]
              },
              "mode": "000500",
              "owner": "root",
              "group": "root"
            },
            "/tmp/install_application": {
              "content": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash -e\n",
                    "source /etc/profile.d/rvm.sh\n",
                    "rvm use 2.3.1\n",
                    "export HOME=/home/ec2-user\n",
                    "export PATH=$PATH:/usr/local/bin\n",
                    "cd /home/ec2-user\n",
                    "# Kill the rails server if it is running to allow update\n",
                    "if pgrep ruby &> /dev/null ; then pkill -TERM ruby ; fi\n",
                    "# This sample template creates a new application inline\n",
                    "# Typically you would use files and/or sources to download\n",
                    "# your application package and perform any configuration here.\n",
                    "# Create a new application, with therubyracer javascript library\n",
                    "rails new sample -d postgresql --skip-spring --skip-bundle --force\n",
                    "cd /home/ec2-user/sample\n",
                    "sed -i 's/^# \\(.*therubyracer.*$\\)/\\1/' Gemfile\n",
                    "bundle install\n",
                    "# Create a sample scoffold\n",
                    "rails generate scaffold Note title:string body:text --force\n",
                    "# Configure the database connection\n",
                    "mv /tmp/database.yml config\n",
                    "# Since there are multiple instances running, conditionalize the migration\n",
                    "# so that only 1 host creates the tables. In the real world, you may check to\n",
                    "# see if the table matches the schema and do a migrate so that updates work\n",
                    "file=$(find db/migrate/*create_notes* -type f -printf '%f')\n",
                    "mv /tmp/conditional_migration.rb db/migrate/$file\n",
                    "rake db:migrate\n"
                  ]
                ]
              },
              "mode": "000500",
              "owner": "root",
              "group": "root"
            },
            "/home/ec2-user/start-application": {
              "content": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash -e\n",
                    "source /etc/profile.d/rvm.sh\n",
                    "rvm use 2.3.1\n",
                    "export HOME=/home/ec2-user\n",
                    "export PATH=$PATH:/usr/local/bin\n",
                    "cd /home/ec2-user/sample\n",
                    "# Startup the application\n",
                    "rails server --binding 0.0.0.0 -p 80 -d\n"
                  ]
                ]
              },
              "mode": "000500",
              "owner": "root",
              "group": "root"
            }
          },
          "commands": {
            "01_install_application": {
              "command": "/tmp/install_application > /var/log/install_application.log"
            },
            "02_configure_reboot": {
              "command": "echo /home/ec2-user/start-application >> /etc/rc.local"
            },
            "03_start_application": {
              "command": "/home/ec2-user/start-application"
            },
            "04_cleanup": {
              "command": "rm /tmp/install_application"
            }
          }
        }
      },
      "AWS::CloudFormation::Designer": {
        "id": "5f8149bb-2baf-40d7-9f95-8fc616d3795f"
      }
    },
    "Properties": {
      "ImageId": {
        "Fn::FindInMap": [
          "AWSRegionArch2AMI",
          {
            "Ref": "AWS::Region"
          },
          {
            "Fn::FindInMap": [
              "AWSInstanceType2Arch",
              {
                "Ref": "InstanceType"
              },
              "Arch"
            ]
          }
        ]
      },
      "InstanceType": {
        "Ref": "InstanceType"
      },
      "SecurityGroups": [
        {
          "Ref": "WebServerSecurityGroup"
        }
      ],
      "KeyName": {
        "Ref": "KeyName"
      },
      "UserData": {
        "Fn::Base64": {
          "Fn::Join": [
            "",
            [
              "#!/bin/bash -xe\n",
              "yum update -y aws-cfn-bootstrap\n",
              "/opt/aws/bin/cfn-init -v ",
              "         --stack ",
              {
                "Ref": "AWS::StackId"
              },
              "         --resource LaunchConfig ",
              "         --configsets full_install ",
              "         --region ",
              {
                "Ref": "AWS::Region"
              },
              "\n",
              "/opt/aws/bin/cfn-signal -e $? ",
              "         --stack ",
              {
                "Ref": "AWS::StackId"
              },
              "         --resource WebServerGroup ",
              "         --region ",
              {
                "Ref": "AWS::Region"
              },
              "\n"
            ]
          ]
        }
      }
    }
  }
}
